# v3プロジェクト企画フェーズ コマンド設定ファイル

# ステップ参照用の正式名称定義（表記揺れ防止）
step_references:
  phase1-step1: "Phase1-Step1（アイデアと目標）"
  phase1-step2: "Phase1-Step2（ユーザー要件定義）"
  phase1-step3: "Phase1-Step3（ユーザーインタラクション設計）"
  phase2-step1: "Phase2-Step1（データ構造定義）"
  phase2-step2: "Phase2-Step2（システム全体データフロー）"
  phase2-step3: "Phase2-Step3（API設計）"
  phase3-step1: "Phase3-Step1（テスト計画策定）"
  phase3-step2: "Phase3-Step2（実装設計）"

# 共通要素定義
common:
  base_tools: ["Read", "Write", "Edit", "Bash"]
  output_path: "~/Documents/planning_docs/development_planning_v3/"
  commands_output_dir: "~/.claude/commands/development_planning_v3"

# 個別要素（step別に比較可能な構造）
individual_elements:
  description:
    phase1-step1: "ソフトウェア開発のアイデアと目標の明確化"
    phase1-step2: "ユーザー要件をユーザーストーリー形式で定義"
    phase1-step3: "ユーザーとシステムのインタラクションをシーケンス図で設計"
    phase2-step1: "システムのデータ構造をER図で定義"
    phase2-step2: "システム全体のデータフロー設計とMermaidダイアグラム記述"
    phase2-step3: "API設計とデータフローの定義"
    phase3-step1: "テスト関数のsignature特定・疑似コード記述可能なテスト設計"
    phase3-step2: "システム内部の実装設計・疑似コード生成可能な詳細設計"

  overview:
    phase1-step1: |
      このコマンドは、ソフトウェア開発プロジェクトの根幹となる **なぜソフトウェアを開発するのか** という動機と、**達成したい素朴なアイデアと最終目標** を明確に言語化します。
    phase1-step2: |
      ターゲットユーザーがシステムを通じて何を達成したいのかを、**ユーザーストーリー**（As a [role], I want to [function], so that [value/purpose]）として具体的に記述します。
    phase1-step3: |
      ユーザーがシステムとどのように関わり、どのような情報交換が行われるかを**ユースケース別シーケンス図**を用いて視覚的に表現します。これにより、ユーザーとシステムの間のやり取り、およびインターフェースの振る舞いを明確にします。
    phase2-step1: |
      システムが扱うデータの構造を**ER図**（エンティティ関係図）として定義します。これにより、エンティティごとの属性、それらの間のリレーションシップを明確にします。
    phase2-step2: |
      プロジェクト全体のデータアーキテクチャを設計し、システム全体でのデータの流れを定義します。データベースのテーブル、プロパティ、データ加工ロジック、および最終的な出力スキーマ間の関係性を**Mermaidダイアグラム**で視覚化します。
    phase2-step3: |
      システム全体データフローを基に、個別のAPIエンドポイントを設計します。各APIがどのようにデータを処理し、データベースとの間でどのようにやり取りするかを**APIごとのフローチャート**で表現します。個別APIの詳細な入出力仕様とビジネスロジックを定義します。
    phase3-step1: |
      ユーザー要件を満たしているか検証するための受け入れテストを中心とした抽象度の高い**テスト関数のsignature**を特定し、**疑似コード記述可能な詳細度**でテスト設計を行います。テスト対象関数の特定、入力パラメータと期待する出力（assert文）の定義、Given-When-Then形式での具体的なテスト手順まで明確にします。
    phase3-step2: |
      実際のコードレベルでの実装方法を、**疑似コードが記述可能な詳細度**まで設計します。**実装の関係性を記したフローチャート**（例：クラス図、関数呼び出しシーケンス）に加えて、主要なアルゴリズム、関数シグネチャ、データ変換処理の具体的なステップを定義します。これにより、各コンポーネントの役割、連携方法、および実装に直結する詳細な設計が明確になります。

  dependencies_check:
    phase1-step1: []
    phase1-step2: ["phase1-step1"]
    phase1-step3: ["phase1-step1", "phase1-step2"]
    phase2-step1: ["phase1-step1", "phase1-step2", "phase1-step3"]
    phase2-step2: ["phase2-step1"]
    phase2-step3: ["phase1-step3", "phase2-step1", "phase2-step2"]
    phase3-step1: ["phase1-step3", "phase2-step3"]
    phase3-step2: ["phase2-step1", "phase2-step2", "phase2-step3", "phase3-step1"]

  specific_questions:
    phase1-step1:
      - "プロジェクトの背景は明確になっていますか？"
      - "解決したい具体的な課題はありますか？"
      - "基本的なアイデア（何を作るか）は固まっていますか？"
      - "成功の定義は明確ですか？"
      - "既存の一般的なツールやサービスではなぜ目的を達成できないのですか？"
      - "あえて一から開発する理由や、独自に作ることで得られる価値は何ですか？"
    phase1-step2:
      - "ターゲットユーザーの具体的なペルソナは明確ですか？"
      - "各ユーザーがシステムに求める主要な機能は何ですか？"
      - "その機能で得られる価値やメリットは何ですか？"
      - "機能の優先度や重要度はどう分けられますか？"
      - "受け入れ基準（いつ「完成」と判断するか）は明確ですか？"
    phase1-step3:
      - "各ユーザーストーリーの具体的なワークフローは明確ですか？"
      - "ユーザーがシステムとどうやり取りするか具体的にイメージできますか？"
      - "各機能での入力・出力データは何ですか？"
      - "エラーや例外ケースはどのようなものがありますか？"
      - "UI/UXのイメージや選好はありますか？"
    phase2-step1:
      - "システムで管理すべきデータは明確ですか？"
      - "データ間の関係性は理解できていますか？"
      - "データのライフサイクル（作成・更新・削除）はどうなりますか？"
      - "データ量の想定はどの程度ですか？"
      - "必須項目や一意性の制約はありますか？"
    phase2-step2:
      - "データソース間の関係性は明確ですか？"
      - "主要なデータ変換・集約処理はありますか？"
      - "データの流れとライフサイクルは明確ですか？"
      - "外部システムとのデータ連携はありますか？"
      - "データアクセスパターンや頻度はどうですか？"
    phase2-step3:
      - "各エンドポイントの具体的な仕様は明確ですか？"
      - "各ユーザーストーリーに必要なAPIは何ですか？"
      - "各APIの入力パラメータと出力データは何ですか？"
      - "どのHTTPメソッドを使いますか？"
      - "各APIでどのようなビジネスロジックが必要ですか？"
      - "データベースとのやり取りはどうなりますか？"
    phase3-step1:
      - "テストのスコープや優先度は明確ですか？"
      - "品質基準や受け入れ条件は明確ですか？"
      - "テスト対象となる関数とそのsignatureは特定できていますか？"
      - "各テストケースの具体的な手順（Given-When-Then）は明確ですか？"
    phase3-step2:
      - "技術スタックやアーキテクチャの制約はありますか？"
      - "使用したいプログラミング言語やフレームワークはありますか？"
      - "主要なアルゴリズムやビジネスロジックの処理手順は明確ですか？"
      - "各関数の入力パラメータ、戻り値、副作用は定義できていますか？"
      - "データ変換処理の詳細なステップは明確ですか？"
      - "エラーハンドリングの具体的な条件と対応は明確ですか？"

  dependencies_from_to:
    phase1-step1:
      from: "なし（プロジェクトの起点）"
      to: ["phase1-step2", "phase2-step1", "その他全ステップ"]
    phase1-step2:
      from: ["phase1-step1"]
      to: ["phase1-step3"]
    phase1-step3:
      from: ["phase1-step2"]
      to: ["phase2-step3", "phase3-step1"]
    phase2-step1:
      from: ["phase1-step1", "phase1-step2", "phase1-step3"]
      to: ["phase2-step2", "phase2-step3", "phase3-step2"]
    phase2-step2:
      from: ["phase2-step1"]
      to: ["phase2-step3", "phase3-step2"]
    phase2-step3:
      from: ["phase1-step3", "phase2-step1", "phase2-step2"]
      to: ["phase3-step1", "phase3-step2"]
    phase3-step1:
      from: ["phase1-step3", "phase2-step3"]
      to: ["phase3-step2"]
    phase3-step2:
      from: ["phase2-step1", "phase2-step2", "phase2-step3", "phase3-step1"]
      to: ["実装フェーズ"]

  interaction_points:
    phase1-step1: |
      - **コアコンセプトの抽出が最重要**: 複雑な説明より、数フレーズで「何を作るか」の本質を表現することを優先してください
      - ユーザーが「あれもこれも」と機能を並べた場合は、「最も核心となる価値は何か」に絞り込んでください  
      - **ユーザー像や詳細機能の議論は避ける**: 「誰が使うか」「どう使うか」はPhase1-Step2で扱うため、ここでは「何を作るか」に集中してください
    phase1-step2: |
      - ユーザーが「すべてのユーザー」と答えた場合は、具体的なユーザー像を掘り下げて絞り込んでください
      - 機能の詳細が曖昧な場合は、具体的な使用シーンやワークフローを聞き取ってください
      - 受け入れ基準はテスト可能な具体的な条件にしてください
      - 優先度の根拠（なぜその機能が重要か）も確認してください
    phase1-step3: |
      - ユーザーが「普通にやればいい」と答えた場合は、具体的なシナリオを例示して詳細を引き出してください
      - UIのイメージが曖昧な場合は、他のサービスを例に出して具体化してください
      - エラーケースは「どんなことがうまくいかないか」を具体的に想像してもらってください
      - シーケンス図は最初はシンプルに、必要に応じて詳細化するアプローチを取ってください
    phase2-step1: |
      - データオブジェクトが曖昧な場合は、具体的なサンプルデータを例示して明確化してください
      - 技術的制約（データベース種類、パフォーマンス要件）を確認して現実的な設計を行ってください
      - 正規化レベルについてはユーザーの理解レベルに合わせて説明してください
      - 将来の機能拡張やデータ量増加への対応も考慮した設計を心がけてください
    phase2-step2: |
      - システム全体のデータフローが複雑な場合は、段階的に詳細化するアプローチを取ってください
      - データボトルネックやパフォーマンス影響を早期に識別してください
      - 将来の拡張性を考慮したアーキテクチャ設計を心がけてください
      - Mermaidダイアグラムは視覚的にわかりやすく、実装に直結する詳細度を保ってください
    phase2-step3: |
      - APIの命名やURL構造が曖昧な場合は、他のサービスのAPIを例に出して具体化してください
      - セキュリティ要件の重要度を確認し、ユーザーのリスク許容度に合わせた設計を行ってください
      - パフォーマンス要件は具体的な数値（レスポンス時間、同時接続数等）で確認してください
      - エラーメッセージはユーザーにとってわかりやすい表現で設計してください
    phase3-step1: |
      - **テスト疑似コード記述可能な詳細度**: テスト関数のsignature特定と合わせて、Given-When-Then形式での具体的なテスト手順を疑似コード形式で記述できる詳細度まで設計してください
      - **テスト関数signature特定**: テスト対象となる主要な関数の引数・戻り値・期待値を明確に定義してください
      - **依存関係の可視化**: テスト対象の関数や外部モジュールとの依存関係を、$(モジュール名)/$(関数名) をノードとするmermaid記法で記述してください
      - **品質基準の定量化**: 品質基準は測定可能で具体的な数値や条件で定義してください
    phase3-step2: |
      - **疑似コード記述可能な詳細度**: フローチャートと合わせて、主要処理の具体的なステップを疑似コード形式で記述できる詳細度まで設計してください
      - **関数シグネチャの明確化**: 主要な関数の引数、戻り値、副作用を具体的に定義してください
      - **依存関係の整理**: 主要な関数や外部モジュールとの依存関係を、$(モジュール名)/$(関数名) をノードとするmermaid記法で記述してください
      - **シンプルさ優先**: 過度に複雑な設計パターンは避け、実装可能性を重視した設計を心がけてください

# 全体フェーズ構造定義
phase_structure:
  enable_overview: true
  show_on_steps: ["phase1-step1"]  # どのステップで全体構想を表示するか
  
  phases:
    phase1:
      title: "Phase 1: 要件定義フェーズ"
      description: "プロジェクトの目的、ユーザー要件、インタラクション設計を明確化"
      steps:
        - id: "phase1-step1"
          filename: "phase1-step1-idea-and-goals.md"
          description: "アイデアと目標の明確化"
        - id: "phase1-step2"
          filename: "phase1-step2-user-requirements.md"
          description: "ユーザー要件定義"
        - id: "phase1-step3"
          filename: "phase1-step3-user-interaction.md"
          description: "ユーザーインタラクション設計"
    
    phase2:
      title: "Phase 2: システム設計フェーズ"
      description: "データ構造、システムフロー、API設計を策定"
      steps:
        - id: "phase2-step1"
          filename: "phase2-step1-data-structure.md"
          description: "データ構造定義"
        - id: "phase2-step2"
          filename: "phase2-step2-system-dataflow.md"
          description: "システム全体データフロー設計"
        - id: "phase2-step3"
          filename: "phase2-step3-api-design.md"
          description: "API設計（個別API）"
    
    phase3:
      title: "Phase 3: 実装準備フェーズ"
      description: "テスト計画と実装設計を完成"
      steps:
        - id: "phase3-step1"
          filename: "phase3-step1-test-plan.md"
          description: "テスト計画策定"
        - id: "phase3-step2"
          filename: "phase3-step2-implementation-design.md"
          description: "実装設計"

# 段階的質問処理原則
sequential_questioning:
  principle: |
    **複数の質問がある場合の処理原則**：
    複数の項目について確認が必要な場合は、必ず一つずつ順番に処理し、各質問の回答を確認してから次の質問に進む。一度に全ての質問を提示することは避け、段階的なアプローチを取る。
  
  template_format: |
    ```    [{purpose}]のため、まず最初の項目について番号で選択してください：

    ## {item_title}
    以下から該当するものを選んでください（複数選択可）：
    1. {option1_description}
    2. {option2_description}
    3. {option3_description}
    4. その他（具体的に記入：_______）
    ---
    User: 回答例: 1, 3
    （{item_title}の回答を確認後、次の項目について質問）

    ---

    ## {next_item_title}
    以下から最も近いものを選んでください：
    1. {option1_description}
    2. {option2_description}
    3. {option3_description}
    4. その他（具体的に記入：_______）

    ---
    User: 回答例: 2
    ```

# 次ステップガイド設定
next_step_guidance:
  enable: true
  guidance_instruction: |
    ### 🚀 次のステップガイド
    
    このステップで収集・整理した情報を基に、次の候補ステップを提案してください：
    
    **ガイド原則**:
    - 今回の成果物の内容に基づいて適切な次ステップを提案
    - 不要と思われるステップには理由とともにスキップ提案
    - 各候補ステップで何をするかを簡潔に説明
    - 実行コマンドを明示
    - 最終的な選択はユーザーに委ねる
    
    **スキップ判断基準例**:
    - データ量が少ない/構造が単純 → phase2-step1（データ構造定義）をスキップしてphase2-step3（API設計）へ
    - UIがない/最小限 → phase1-step3（インタラクション設計）をスキップしてphase2-step1へ
    - データフローが単純 → phase2-step2（システム全体データフロー）をスキップしてphase2-step3へ
    - テストより実装を優先 → phase3-step1（テスト計画）をスキップしてphase3-step2へ

# 特別な処理要素
special_processes:
  phase1-step1:
    core_idea_extraction: |
      ### 3. コアアイデアの抽出と確認
      収集した情報から、まず**プロジェクトの本質を一行で表現**してください：
      
      ```
      まず、このプロジェクトの本質を一言で表すとどのようなものでしょうか？
      数フレーズ程度（最大でも140文字以内）で、「何を作るのか」の核心部分を教えてください。
      ※ユーザー像や詳細機能はPhase1-Step2で扱うため、ここでは作るものの本質のみに集中してください。
      
      例：
      - 家計管理自動化システム
      - チームタスク共有プラットフォーム  
      - 地域情報交換サイト
      - 学習記録可視化ツール
      - 在庫管理効率化アプリ
      ```
  
  phase1-step2:
    user_story_questions: |
      ### 3. ユーザーストーリー作成のための詳細質問
      **ユーザーストーリー作成のための質問例:**
      ```
      ユーザーストーリー作成のため、まず最初の項目について詳しく教えてください：
      
      ## ユーザータイプ/ペルソナ
      - 主要なユーザー層はどのような人たちですか？
      - それぞれの特徴やニーズは何ですか？
      
      （回答を確認後、次の項目について質問を続ける）
      
      ## 求められる機能
      - 各ユーザータイプが「これができたらいいな」と思う機能は？
      - 具体的な使用シーンを教えてください
      
      （回答を確認後、次の項目について質問を続ける）
      
      ## 得られる価値
      - その機能でユーザーの問題がどう解決されますか？
      - ユーザーにとってのメリットは何ですか？
      ```

  phase3-step1:
    test_pseudocode_requirements: |
      ### 4. テスト疑似コード記述のための詳細化
      主要なテストケースの疑似コードが書ける詳細度まで以下を設計してください：
      - Given-When-Then形式での具体的なテスト手順
      - assert文の具体的な条件と期待値
      - 境界値・異常系・正常系の網羅的なケース設計
      - テストデータの準備とクリーンアップの処理

  phase3-step2:
    pseudocode_requirements: |
      ### 4. 疑似コード生成のための詳細化
      主要な処理の疑似コードが書ける詳細度まで以下を設計してください：
      - 核となる処理の具体的なステップ（ループ、条件分岐）
      - 各関数の責務、引数、戻り値の型と形式
      - 外部ライブラリやAPI呼び出しの具体的な方法
      - エラーハンドリングの詳細な分岐条件
